import streamlit as st
import pandas as pd
import plotly.express as px

# -----------------------------------------------------
# üîß CONFIGURA√á√ÉO INICIAL
# -----------------------------------------------------
st.set_page_config(page_title="Comex Municipal", layout="wide")
st.title("üìä An√°lise de Com√©rcio Exterior Municipal")

st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# -----------------------------------------------------
# üìÇ UPLOAD DE ARQUIVO
# -----------------------------------------------------
uploaded_file = st.sidebar.file_uploader(
    "Envie seu arquivo CSV ou Excel do ComexStat:",
    type=["csv", "xlsx"]
)

if uploaded_file is None:
    st.info("‚¨ÜÔ∏è Envie um arquivo para iniciar a an√°lise.")
    st.stop()

# Leitura do arquivo
if uploaded_file.name.endswith(".csv"):
    df = pd.read_csv(uploaded_file, sep=";", encoding="latin1")
else:
    df = pd.read_excel(uploaded_file)

# Padronizar nomes de colunas
df.columns = df.columns.str.strip()

# -----------------------------------------------------
# üßπ LIMPEZA E CONVERS√ÉO DE DADOS
# -----------------------------------------------------
if "Valor US$ FOB" in df.columns:
    df["Valor US$ FOB"] = (
        df["Valor US$ FOB"]
        .astype(str)
        .str.replace(".", "", regex=False)
        .str.replace(",", ".", regex=False)
        .astype(float)
    )

# -----------------------------------------------------
# üß≠ MAPEAMENTO DE MESES
# -----------------------------------------------------
mes_map = {
    "Janeiro": 1, "Fevereiro": 2, "Mar√ßo": 3, "Abril": 4,
    "Maio": 5, "Junho": 6, "Julho": 7, "Agosto": 8,
    "Setembro": 9, "Outubro": 10, "Novembro": 11, "Dezembro": 12
}

if "M√™s" in df.columns:
    df["M√™sNum"] = df["M√™s"].map(mes_map)
    df["M√™sNum"] = pd.to_numeric(df["M√™sNum"], errors="coerce").astype("Int64")
else:
    df["M√™sNum"] = pd.NA

# Criar trimestre
if df["M√™sNum"].notna().any():
    df["Trimestre"] = ((df["M√™sNum"] - 1) // 3 + 1).astype("Int64")
else:
    df["Trimestre"] = pd.NA

# -----------------------------------------------------
# üß© SELE√á√ÉO DE PER√çODO (Mensal, Trimestral, Anual)
# -----------------------------------------------------
periodo_tipo = st.sidebar.radio(
    "Selecione o tipo de per√≠odo:",
    ["Mensal", "Trimestral", "Anual"],
    horizontal=True
)

if periodo_tipo == "Mensal":
    if "M√™sNum" in df.columns:
        df["Per√≠odo"] = df["Ano"].astype(str) + "-" + df["M√™sNum"].astype(str).str.zfill(2)
    else:
        st.warning("Coluna 'M√™s' n√£o encontrada ‚Äî exibindo dados anuais.")
        df["Per√≠odo"] = df["Ano"].astype(str)

elif periodo_tipo == "Trimestral":
    if "Trimestre" in df.columns and df["Trimestre"].notna().any():
        df["Per√≠odo"] = df["Ano"].astype(str) + "T" + df["Trimestre"].astype(str)
    else:
        st.warning("N√£o foi poss√≠vel criar trimestres ‚Äî exibindo dados anuais.")
        df["Per√≠odo"] = df["Ano"].astype(str)

else:  # Anual
    df["Per√≠odo"] = df["Ano"].astype(str)

df["Per√≠odo"] = df["Per√≠odo"].astype(str)

st.caption(f"üîé Tipo de per√≠odo selecionado: **{periodo_tipo}** ({df['Per√≠odo'].nunique()} valores distintos)")

# -----------------------------------------------------
# üåç FILTRAR FLUXOS (Exporta√ß√µes e Importa√ß√µes)
# -----------------------------------------------------
if "Fluxo" not in df.columns:
    st.error("A coluna 'Fluxo' √© obrigat√≥ria (Exporta√ß√£o / Importa√ß√£o).")
    st.stop()

df_exp = df[df["Fluxo"].str.lower().str.contains("export", na=False)].copy()
df_imp = df[df["Fluxo"].str.lower().str.contains("import", na=False)].copy()

if df_exp.empty and df_imp.empty:
    st.error("Nenhum dado de exporta√ß√£o ou importa√ß√£o foi encontrado.")
    st.stop()

# -----------------------------------------------------
# üßÆ AGRUPAMENTOS B√ÅSICOS
# -----------------------------------------------------
if not df_exp.empty:
    df_exp_group = df_exp.groupby(["Per√≠odo", "Pa√≠s"], as_index=False)["Valor US$ FOB"].sum()
if not df_imp.empty:
    df_imp_group = df_imp.groupby(["Per√≠odo", "Pa√≠s"], as_index=False)["Valor US$ FOB"].sum()

# -----------------------------------------------------
# üìä ABA DE VISUALIZA√á√ÉO
# -----------------------------------------------------
tab1, tab2, tab3 = st.tabs(["üåç Mapas", "üìà Comparativo", "üèÜ Rankings"])

# -----------------------------------------------------
# üåç MAPAS
# -----------------------------------------------------
with tab1:
    st.subheader("üåç Mapa de Exporta√ß√µes e Importa√ß√µes")

    tipo_fluxo = st.radio("Escolha o tipo de fluxo:", ["Exporta√ß√µes", "Importa√ß√µes"], horizontal=True)

    if tipo_fluxo == "Exporta√ß√µes" and not df_exp_group.empty:
        fig = px.choropleth(
            df_exp_group,
            locations="Pa√≠s",
            locationmode="country names",
            color="Valor US$ FOB",
            hover_name="Pa√≠s",
            animation_frame="Per√≠odo",
            color_continuous_scale="Viridis",
            title="Exporta√ß√µes por pa√≠s"
        )
        st.plotly_chart(fig, use_container_width=True)

    elif tipo_fluxo == "Importa√ß√µes" and not df_imp_group.empty:
        fig = px.choropleth(
            df_imp_group,
            locations="Pa√≠s",
            locationmode="country names",
            color="Valor US$ FOB",
            hover_name="Pa√≠s",
            animation_frame="Per√≠odo",
            color_continuous_scale="Blues",
            title="Importa√ß√µes por pa√≠s"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Sem dados dispon√≠veis para o tipo de fluxo selecionado.")

# -----------------------------------------------------
# üìà COMPARATIVO TEMPORAL
# -----------------------------------------------------
with tab2:
    st.subheader("üìà Evolu√ß√£o Temporal do Com√©rcio Internacional")

    if not df_exp.empty:
        df_exp_total = df_exp.groupby("Per√≠odo", as_index=False)["Valor US$ FOB"].sum()
        fig_exp = px.line(df_exp_total, x="Per√≠odo", y="Valor US$ FOB", title="Exporta√ß√µes ao longo do tempo")
        st.plotly_chart(fig_exp, use_container_width=True)

    if not df_imp.empty:
        df_imp_total = df_imp.groupby("Per√≠odo", as_index=False)["Valor US$ FOB"].sum()
        fig_imp = px.line(df_imp_total, x="Per√≠odo", y="Valor US$ FOB", title="Importa√ß√µes ao longo do tempo")
        st.plotly_chart(fig_imp, use_container_width=True)

# -----------------------------------------------------
# üèÜ RANKINGS
# -----------------------------------------------------
with tab3:
    st.subheader("üèÜ Principais Parceiros Comerciais")

    top_n = st.slider("Selecione quantos pa√≠ses exibir:", 5, 20, 10)

    if not df_exp_group.empty:
        top_exp = df_exp_group.groupby("Pa√≠s", as_index=False)["Valor US$ FOB"].sum().nlargest(top_n, "Valor US$ FOB")
        fig_top_exp = px.bar(top_exp, x="Pa√≠s", y="Valor US$ FOB", title=f"Top {top_n} destinos de exporta√ß√£o")
        st.plotly_chart(fig_top_exp, use_container_width=True)

    if not df_imp_group.empty:
        top_imp = df_imp_group.groupby("Pa√≠s", as_index=False)["Valor US$ FOB"].sum().nlargest(top_n, "Valor US$ FOB")
        fig_top_imp = px.bar(top_imp, x="Pa√≠s", y="Valor US$ FOB", title=f"Top {top_n} origens de importa√ß√£o")
        st.plotly_chart(fig_top_imp, use_container_width=True)

    # üìã Mostrar base
    with st.expander("üìã Mostrar Base de Dados"):
        st.dataframe(df.sort_values(by=["Ano"]), use_container_width=True)





