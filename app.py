import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import urllib3
import ast

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ==============================
# 1Ô∏è‚É£ Carregar base de munic√≠pios
# ==============================
@st.cache_data
def carregar_municipios():
    try:
        municipios = pd.read_csv("UF_MUN.csv", dtype={"CO_MUN_GEO": str})
        if not all(col in municipios.columns for col in ["CO_MUN_GEO", "NO_MUN_MIN", "SG_UF"]):
            st.error("‚ö†Ô∏è O arquivo 'UF_MUN.csv' precisa conter as colunas: CO_MUN_GEO, NO_MUN_MIN e SG_UF.")
            st.stop()

        municipios["municipio_uf"] = (
            municipios["NO_MUN_MIN"].str.strip() + " - " + municipios["SG_UF"].str.strip()
        )
        return municipios
    except Exception as e:
        st.error(f"Erro ao carregar UF_MUN.csv: {e}")
        st.stop()

# ==================================
# 2Ô∏è‚É£ Acessar o c√≥digo do munic√≠pio
# ==================================
def obter_codigo_municipio(municipio_uf, municipios_df):
    municipio_uf = municipio_uf.strip().lower()
    resultado = municipios_df[municipios_df["municipio_uf"].str.lower() == municipio_uf]
    if len(resultado) == 0:
        st.error("Munic√≠pio n√£o encontrado.")
        return None
    else:
        return resultado.iloc[0]["CO_MUN_GEO"]

# =======================================
# 3Ô∏è‚É£ Fun√ß√£o principal da API do Comex Stat
# =======================================
@st.cache_data
def consulta_comex(ano_inicio, ano_fim, codigo_municipio):
    url = "https://api-comexstat.mdic.gov.br/cities?language=pt"
    headers = {"Content-Type": "application/json", "Accept": "application/json"}

    def consulta_fluxo(flow):
        payload = {
            "flow": flow,
            "monthDetail": True,
            "period": {"from": f"{ano_inicio}-01", "to": f"{ano_fim}-12"},
            "filters": [{"filter": "city", "values": [codigo_municipio]}],
            "details": ["city", "country", "economicBlock"],
            "metrics": ["metricFOB"]
        }
        response = requests.post(url, json=payload, headers=headers, verify=False)
        if response.status_code == 200:
            data = response.json()
            if data.get("data") and data["data"].get("list"):
                df = pd.DataFrame(data["data"]["list"])
                df["flow"] = flow
                return df
        return pd.DataFrame()

    df_import = consulta_fluxo("import")
    df_export = consulta_fluxo("export")
    return pd.concat([df_import, df_export], ignore_index=True)

# ===========================
# Interface Streamlit
# ===========================
st.set_page_config(page_title="Com√©rcio Exterior Municipal", layout="wide")
st.title("üìä An√°lise de Com√©rcio Exterior Municipal")

# ===========================
# üîß Escolha do modo de entrada
# ===========================
st.sidebar.header("‚öôÔ∏è Escolha a forma de carregar os dados")

modo = st.sidebar.radio(
    "Como voc√™ deseja obter os dados?",
    ("Usar API do ComexStat", "Enviar arquivo CSV/Excel"),
    horizontal=False
)

df = pd.DataFrame()  # base vazia

# ======================================================
# üöÄ MODO 1: API DO COMEXSTAT
# ======================================================
if modo == "Usar API do ComexStat":
    municipios = carregar_municipios()

    municipio_input = st.sidebar.selectbox(
        "Selecione o munic√≠pio e UF",
        sorted(municipios["municipio_uf"].unique()),
        index=None,
        placeholder="Ex: S√£o Paulo - SP"
    )

    ano_inicio = st.sidebar.number_input("Ano inicial", min_value=1997, max_value=2025, value=2020)
    ano_fim = st.sidebar.number_input("Ano final", min_value=1997, max_value=2025, value=2025)
    periodo = st.sidebar.radio("Tipo de visualiza√ß√£o:", ["Mensal", "Trimestral", "Anual"], horizontal=True)

    consultar = st.sidebar.button("üîç Consultar dados")

    if consultar:
        if not municipio_input:
            st.warning("Por favor, selecione um munic√≠pio antes de consultar.")
            st.stop()
        codigo_municipio = obter_codigo_municipio(municipio_input, municipios)
        df = consulta_comex(ano_inicio, ano_fim, codigo_municipio)

        if df.empty:
            st.error("Nenhum dado retornado pela API para o per√≠odo selecionado.")
            st.stop()

# ======================================================
# üìÇ MODO 2: UPLOAD DE ARQUIVO
# ======================================================
else:
    st.sidebar.info("O arquivo deve conter as colunas: 'Ano', 'Fluxo', 'Descri√ß√£o Se√ß√£o', 'Pa√≠s', 'Valor US$ FOB'")
    arquivo = st.sidebar.file_uploader("Envie seu arquivo CSV ou Excel", type=["csv", "xlsx", "xls"])
    periodo = st.sidebar.radio("Tipo de visualiza√ß√£o:", ["Mensal", "Trimestral", "Anual"], horizontal=True)

    if arquivo is not None:
        try:
            df = pd.read_csv(arquivo) if arquivo.name.endswith(".csv") else pd.read_excel(arquivo)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo: {e}")
            st.stop()

# ======================================================
# üîÑ PROCESSAMENTO E VISUALIZA√á√ÉO
# ======================================================
if not df.empty:
    st.success(f"‚úÖ {len(df)} registros carregados com sucesso!")

    meses = {
        1: "01. Janeiro", 2: "02. Fevereiro", 3: "03. Mar√ßo",
        4: "04. Abril", 5: "05. Maio", 6: "06. Junho",
        7: "07. Julho", 8: "08. Agosto", 9: "09. Setembro",
        10: "10. Outubro", 11: "11. Novembro", 12: "12. Dezembro"
    }

    df.rename(columns={
        "year": "Ano", "country": "Pa√≠s", "section": "Descri√ß√£o Se√ß√£o",
        "metricFOB": "Valor US$ FOB", "flow": "Fluxo", "monthNumber": "M√™sNum"
    }, inplace=True)

    if "Valor US$ FOB" in df.columns:
        df["Valor US$ FOB"] = pd.to_numeric(df["Valor US$ FOB"], errors="coerce")

    if "M√™sNum" in df.columns:
        df["M√™sNum"] = pd.to_numeric(df["M√™sNum"], errors="coerce")
        df["M√™s"] = df["M√™sNum"].map(meses)

    # Criar per√≠odo
    if periodo == "Mensal" and "M√™sNum" in df.columns:
        df["Per√≠odo"] = df["Ano"].astype(str) + " - " + df["M√™sNum"].astype(int).astype(str).str.zfill(2)
    elif periodo == "Trimestral" and "M√™sNum" in df.columns:
        df["Trimestre"] = ((df["M√™sNum"] - 1) // 3 + 1).astype(int)
        df["Per√≠odo"] = df["Ano"].astype(str) + " - " + df["Trimestre"].astype(str) + "¬∫T"
    else:
        df["Per√≠odo"] = df["Ano"].astype(str)

    # Tradu√ß√£o de pa√≠ses (para os mapas)
    try:
        with open("paises.txt", "r", encoding="utf-8") as f:
            conteudo = "{" + f.read().strip().strip(",") + "}"
        traducao_paises = ast.literal_eval(conteudo)
        df["Pa√≠s"] = df["Pa√≠s"].replace(traducao_paises)
        traducao_invertida = {v: k for k, v in traducao_paises.items()}
    except:
        traducao_invertida = {}

    df_exp = df[df["Fluxo"].str.lower().str.contains("export")].copy()
    df_imp = df[df["Fluxo"].str.lower().str.contains("import")].copy()

    tab1, tab2, tab3 = st.tabs(["üåç Mapas", "üìà Comparativo", "üèÜ Rankings"])

    # üåç MAPAS
    with tab1:
        if not df_exp.empty:
            st.subheader("üåç Exporta√ß√µes por Pa√≠s")
            cor = st.selectbox("Escolha o Tema:", ["blues", "blugrn", "Teal"]
            df_exp_group = df_exp.groupby(["Per√≠odo", "Pa√≠s"], as_index=False)["Valor US$ FOB"].sum()
            fig_exp = px.choropleth(df_exp_group, locations="Pa√≠s", locationmode="country names",
                                    color="Valor US$ FOB", color_continuous_scale= cor,
                                    animation_frame="Per√≠odo")
            st.plotly_chart(fig_exp, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è Nenhum dado de exporta√ß√£o dispon√≠vel.")

        if not df_imp.empty:
            st.subheader("üåé Importa√ß√µes por Pa√≠s")
            df_imp_group = df_imp.groupby(["Per√≠odo", "Pa√≠s"], as_index=False)["Valor US$ FOB"].sum()
            fig_imp = px.choropleth(df_imp_group, locations="Pa√≠s", locationmode="country names",
                                    color="Valor US$ FOB", color_continuous_scale="Reds",
                                    animation_frame="Per√≠odo")
            st.plotly_chart(fig_imp, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è Nenhum dado de importa√ß√£o dispon√≠vel.")

    # üìà COMPARATIVO
    with tab2:
        st.subheader("üìà Comparativo de Fluxos e Saldo")
        df_exp["Fluxo"] = "Exporta√ß√£o"
        df_imp["Fluxo"] = "Importa√ß√£o"
        df_comex = pd.concat([df_exp, df_imp], ignore_index=True)

        if df_comex.empty:
            st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para compara√ß√£o.")
        else:
            df_comp = df_comex.groupby(["Per√≠odo", "Fluxo"], as_index=False)["Valor US$ FOB"].sum()
            df_pivot = df_comp.pivot_table(index="Per√≠odo", columns="Fluxo", values="Valor US$ FOB", fill_value=0)

            if "Exporta√ß√£o" in df_pivot.columns and "Importa√ß√£o" in df_pivot.columns:
                df_pivot["Saldo Comercial"] = df_pivot["Exporta√ß√£o"] - df_pivot["Importa√ß√£o"]
            elif "Exporta√ß√£o" in df_pivot.columns:
                df_pivot["Saldo Comercial"] = df_pivot["Exporta√ß√£o"]
            elif "Importa√ß√£o" in df_pivot.columns:
                df_pivot["Saldo Comercial"] = -df_pivot["Importa√ß√£o"]

            df_long = df_pivot.reset_index().melt(id_vars="Per√≠odo", var_name="Indicador", value_name="US$ FOB")
            fig_comp = px.line(df_long, x="Per√≠odo", y="US$ FOB", color="Indicador", markers=True)
            st.plotly_chart(fig_comp, use_container_width=True)

    # üèÜ RANKINGS
    with tab3:
        st.subheader("üèÜ Principais Parceiros Comerciais")
        col1, col2 = st.columns(2)

        with col1:
            if df_exp.empty:
                st.info("‚ÑπÔ∏è Nenhum dado de exporta√ß√£o para exibir ranking.")
            else:
                df_exp_top = df_exp.groupby("Pa√≠s", as_index=False)["Valor US$ FOB"].sum()
                df_exp_top["Pa√≠s"] = df_exp_top["Pa√≠s"].replace(traducao_invertida)
                df_exp_top = df_exp_top.sort_values("Valor US$ FOB", ascending=False).head(10)
                fig_exp_top = px.bar(df_exp_top, x="Valor US$ FOB", y="Pa√≠s", orientation="h",
                                     color="Valor US$ FOB", color_continuous_scale="Blues", text_auto=".2s")
                fig_exp_top.update_layout(yaxis=dict(autorange="reversed"))
                st.plotly_chart(fig_exp_top, use_container_width=True)

        with col2:
            if df_imp.empty:
                st.info("‚ÑπÔ∏è Nenhum dado de importa√ß√£o para exibir ranking.")
            else:
                df_imp_top = df_imp.groupby("Pa√≠s", as_index=False)["Valor US$ FOB"].sum()
                df_imp_top["Pa√≠s"] = df_imp_top["Pa√≠s"].replace(traducao_invertida)
                df_imp_top = df_imp_top.sort_values("Valor US$ FOB", ascending=False).head(10)
                fig_imp_top = px.bar(df_imp_top, x="Valor US$ FOB", y="Pa√≠s", orientation="h",
                                     color="Valor US$ FOB", color_continuous_scale="Reds", text_auto=".2s")
                fig_imp_top.update_layout(yaxis=dict(autorange="reversed"))
                st.plotly_chart(fig_imp_top, use_container_width=True)

    # üìã Mostrar base
    with st.expander("üìã Mostrar Base de Dados"):
        st.dataframe(df.sort_values(by=["Ano"]), use_container_width=True)



